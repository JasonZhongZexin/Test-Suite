; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_nullptr_deref_tests/ExtAPI_strcpy_int_ptr.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_nullptr_deref_tests/ExtAPI_strcpy_int_ptr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %arr = alloca ptr, align 8
  %arr_copy = alloca ptr, align 8
  %i = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  %call = call noalias ptr @malloc(i64 noundef 20) #4
  store ptr %call, ptr %arr, align 8
  %call1 = call noalias ptr @malloc(i64 noundef 20) #4
  store ptr %call1, ptr %arr_copy, align 8
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %cmp = icmp slt i32 %0, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, ptr %i, align 4
  %2 = load ptr, ptr %arr, align 8
  %3 = load i32, ptr %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i32, ptr %2, i64 %idxprom
  store i32 %1, ptr %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, ptr %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  %5 = load ptr, ptr %arr_copy, align 8
  %6 = load ptr, ptr %arr, align 8
  %call2 = call ptr @strcpy(ptr noundef %5, ptr noundef %6) #5
  %7 = load ptr, ptr %arr, align 8
  call void @SAFE_LOAD(ptr noundef %7)
  %8 = load ptr, ptr %arr_copy, align 8
  call void @SAFE_LOAD(ptr noundef %8)
  %9 = load ptr, ptr %arr, align 8
  call void @free(ptr noundef %9) #5
  %10 = load ptr, ptr %arr, align 8
  call void @UNSAFE_LOAD(ptr noundef %10)
  %11 = load ptr, ptr %arr_copy, align 8
  call void @free(ptr noundef %11) #5
  %12 = load ptr, ptr %arr_copy, align 8
  call void @UNSAFE_LOAD(ptr noundef %12)
  ret i32 0
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: nounwind
declare ptr @strcpy(ptr noundef, ptr noundef) #2

declare void @SAFE_LOAD(ptr noundef) #3

; Function Attrs: nounwind
declare void @free(ptr noundef) #2

declare void @UNSAFE_LOAD(ptr noundef) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind allocsize(0) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
