; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_recursion_tests/demo.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/demo.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"result\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @demo(i32 noundef %a) #0 !dbg !18 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  store i32 %a, ptr %a.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %a.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %0 = load i32, ptr %a.addr, align 4, !dbg !25
  %cmp = icmp sge i32 %0, 10000, !dbg !27
  br i1 %cmp, label %if.then, label %if.end, !dbg !28

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %a.addr, align 4, !dbg !29
  store i32 %1, ptr %retval, align 4, !dbg !30
  br label %return, !dbg !30

if.end:                                           ; preds = %entry
  %2 = load i32, ptr %a.addr, align 4, !dbg !31
  %add = add nsw i32 %2, 1, !dbg !32
  %call = call i32 @demo(i32 noundef %add), !dbg !33
  br label %return, !dbg !34

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, ptr %retval, align 4, !dbg !34
  ret i32 %3, !dbg !34
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !35 {
entry:
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %result, metadata !38, metadata !DIExpression()), !dbg !39
  %call = call i32 @demo(i32 noundef 0), !dbg !40
  store i32 %call, ptr %result, align 4, !dbg !39
  %0 = load i32, ptr %result, align 4, !dbg !41
  call void @svf_print(i32 noundef %0, ptr noundef @.str), !dbg !42
  %1 = load i32, ptr %result, align 4, !dbg !43
  %cmp = icmp eq i32 %1, 10000, !dbg !44
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !45
  ret i32 0, !dbg !46
}

declare void @svf_print(i32 noundef, ptr noundef) #2

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!10, !11, !12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 13, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_recursion_tests/demo.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "7ad51fa5feac138f824f2633c177d175")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 56, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 7)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !9, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/demo.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "7ad51fa5feac138f824f2633c177d175")
!9 = !{!0}
!10 = !{i32 7, !"Dwarf Version", i32 5}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 8, !"PIC Level", i32 2}
!14 = !{i32 7, !"PIE Level", i32 2}
!15 = !{i32 7, !"uwtable", i32 2}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!18 = distinct !DISubprogram(name: "demo", scope: !2, file: !2, line: 5, type: !19, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !22)
!19 = !DISubroutineType(types: !20)
!20 = !{!21, !21}
!21 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!22 = !{}
!23 = !DILocalVariable(name: "a", arg: 1, scope: !18, file: !2, line: 5, type: !21)
!24 = !DILocation(line: 5, column: 14, scope: !18)
!25 = !DILocation(line: 6, column: 9, scope: !26)
!26 = distinct !DILexicalBlock(scope: !18, file: !2, line: 6, column: 9)
!27 = !DILocation(line: 6, column: 11, scope: !26)
!28 = !DILocation(line: 6, column: 9, scope: !18)
!29 = !DILocation(line: 7, column: 16, scope: !26)
!30 = !DILocation(line: 7, column: 9, scope: !26)
!31 = !DILocation(line: 8, column: 10, scope: !18)
!32 = !DILocation(line: 8, column: 11, scope: !18)
!33 = !DILocation(line: 8, column: 5, scope: !18)
!34 = !DILocation(line: 9, column: 1, scope: !18)
!35 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 11, type: !36, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !22)
!36 = !DISubroutineType(types: !37)
!37 = !{!21}
!38 = !DILocalVariable(name: "result", scope: !35, file: !2, line: 12, type: !21)
!39 = !DILocation(line: 12, column: 9, scope: !35)
!40 = !DILocation(line: 12, column: 18, scope: !35)
!41 = !DILocation(line: 13, column: 15, scope: !35)
!42 = !DILocation(line: 13, column: 5, scope: !35)
!43 = !DILocation(line: 14, column: 16, scope: !35)
!44 = !DILocation(line: 14, column: 23, scope: !35)
!45 = !DILocation(line: 14, column: 5, scope: !35)
!46 = !DILocation(line: 15, column: 1, scope: !35)
