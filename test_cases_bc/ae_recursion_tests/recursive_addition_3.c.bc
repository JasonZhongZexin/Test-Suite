; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_recursion_tests/recursive_addition_3.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_addition_3.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @addition(i32 noundef %m, i32 noundef %n) #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %m, ptr %m.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %m.addr, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !18, metadata !DIExpression()), !dbg !19
  %0 = load i32, ptr %n.addr, align 4, !dbg !20
  %cmp = icmp eq i32 %0, 0, !dbg !22
  br i1 %cmp, label %if.then, label %if.end, !dbg !23

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %m.addr, align 4, !dbg !24
  store i32 %1, ptr %retval, align 4, !dbg !26
  br label %if.end9, !dbg !26

if.end:                                           ; preds = %entry
  %2 = load i32, ptr %n.addr, align 4, !dbg !27
  %cmp1 = icmp sgt i32 %2, 0, !dbg !29
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !30

if.then2:                                         ; preds = %if.end
  %3 = load i32, ptr %m.addr, align 4, !dbg !31
  %add = add nsw i32 %3, 1, !dbg !33
  %4 = load i32, ptr %n.addr, align 4, !dbg !34
  %sub = sub nsw i32 %4, 1, !dbg !35
  %call = call i32 @addition(i32 noundef %add, i32 noundef %sub), !dbg !36
  store i32 %call, ptr %retval, align 4, !dbg !37
  br label %if.end9, !dbg !37

if.end3:                                          ; preds = %if.end
  %5 = load i32, ptr %n.addr, align 4, !dbg !38
  %cmp4 = icmp slt i32 %5, 0, !dbg !40
  br i1 %cmp4, label %if.then5, label %if.end9, !dbg !41

if.then5:                                         ; preds = %if.end3
  %6 = load i32, ptr %m.addr, align 4, !dbg !42
  %sub6 = sub nsw i32 %6, 1, !dbg !44
  %7 = load i32, ptr %n.addr, align 4, !dbg !45
  %add7 = add nsw i32 %7, 1, !dbg !46
  %call8 = call i32 @addition(i32 noundef %sub6, i32 noundef %add7), !dbg !47
  store i32 %call8, ptr %retval, align 4, !dbg !48
  br label %if.end9, !dbg !48

if.end9:                                          ; preds = %if.then5, %if.end3, %if.then2, %if.then
  %8 = load i32, ptr %retval, align 4, !dbg !49
  ret i32 %8, !dbg !49
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !50 {
entry:
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %result, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 @addition(i32 noundef -10, i32 noundef -5), !dbg !55
  store i32 %call, ptr %result, align 4, !dbg !54
  %0 = load i32, ptr %result, align 4, !dbg !56
  %cmp = icmp sle i32 %0, -10, !dbg !57
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !58
  ret i32 0, !dbg !59
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_addition_3.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "238543459c176a64f10cbc24e54042c6")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!10 = distinct !DISubprogram(name: "addition", scope: !11, file: !11, line: 4, type: !12, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_recursion_tests/recursive_addition_3.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "238543459c176a64f10cbc24e54042c6")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14, !14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "m", arg: 1, scope: !10, file: !11, line: 4, type: !14)
!17 = !DILocation(line: 4, column: 18, scope: !10)
!18 = !DILocalVariable(name: "n", arg: 2, scope: !10, file: !11, line: 4, type: !14)
!19 = !DILocation(line: 4, column: 25, scope: !10)
!20 = !DILocation(line: 5, column: 9, scope: !21)
!21 = distinct !DILexicalBlock(scope: !10, file: !11, line: 5, column: 9)
!22 = !DILocation(line: 5, column: 11, scope: !21)
!23 = !DILocation(line: 5, column: 9, scope: !10)
!24 = !DILocation(line: 6, column: 16, scope: !25)
!25 = distinct !DILexicalBlock(scope: !21, file: !11, line: 5, column: 17)
!26 = !DILocation(line: 6, column: 9, scope: !25)
!27 = !DILocation(line: 8, column: 9, scope: !28)
!28 = distinct !DILexicalBlock(scope: !10, file: !11, line: 8, column: 9)
!29 = !DILocation(line: 8, column: 11, scope: !28)
!30 = !DILocation(line: 8, column: 9, scope: !10)
!31 = !DILocation(line: 9, column: 25, scope: !32)
!32 = distinct !DILexicalBlock(scope: !28, file: !11, line: 8, column: 16)
!33 = !DILocation(line: 9, column: 26, scope: !32)
!34 = !DILocation(line: 9, column: 30, scope: !32)
!35 = !DILocation(line: 9, column: 31, scope: !32)
!36 = !DILocation(line: 9, column: 16, scope: !32)
!37 = !DILocation(line: 9, column: 9, scope: !32)
!38 = !DILocation(line: 11, column: 9, scope: !39)
!39 = distinct !DILexicalBlock(scope: !10, file: !11, line: 11, column: 9)
!40 = !DILocation(line: 11, column: 11, scope: !39)
!41 = !DILocation(line: 11, column: 9, scope: !10)
!42 = !DILocation(line: 12, column: 25, scope: !43)
!43 = distinct !DILexicalBlock(scope: !39, file: !11, line: 11, column: 16)
!44 = !DILocation(line: 12, column: 26, scope: !43)
!45 = !DILocation(line: 12, column: 30, scope: !43)
!46 = !DILocation(line: 12, column: 31, scope: !43)
!47 = !DILocation(line: 12, column: 16, scope: !43)
!48 = !DILocation(line: 12, column: 9, scope: !43)
!49 = !DILocation(line: 14, column: 1, scope: !10)
!50 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 16, type: !51, scopeLine: 16, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!51 = !DISubroutineType(types: !52)
!52 = !{!14}
!53 = !DILocalVariable(name: "result", scope: !50, file: !11, line: 17, type: !14)
!54 = !DILocation(line: 17, column: 9, scope: !50)
!55 = !DILocation(line: 17, column: 18, scope: !50)
!56 = !DILocation(line: 19, column: 16, scope: !50)
!57 = !DILocation(line: 19, column: 23, scope: !50)
!58 = !DILocation(line: 19, column: 5, scope: !50)
!59 = !DILocation(line: 20, column: 1, scope: !50)
