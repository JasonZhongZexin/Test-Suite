; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_recursion_tests/recursive_afterrec_3.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_afterrec_3.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @f(i32 noundef %n) #0 !dbg !15 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !19, metadata !DIExpression()), !dbg !20
  %0 = load i32, ptr %n.addr, align 4, !dbg !21
  %cmp = icmp slt i32 %0, 3, !dbg !23
  br i1 %cmp, label %if.then, label %if.end, !dbg !24

if.then:                                          ; preds = %entry
  store i32 3, ptr @g, align 4, !dbg !25
  br label %return, !dbg !27

if.end:                                           ; preds = %entry
  %1 = load i32, ptr %n.addr, align 4, !dbg !28
  %dec = add nsw i32 %1, -1, !dbg !28
  store i32 %dec, ptr %n.addr, align 4, !dbg !28
  %2 = load i32, ptr %n.addr, align 4, !dbg !29
  call void @f2(i32 noundef %2), !dbg !30
  br label %return, !dbg !31

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !31
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @f2(i32 noundef %n) #0 !dbg !32 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, ptr %n.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %n.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %0 = load i32, ptr %n.addr, align 4, !dbg !35
  %cmp = icmp slt i32 %0, 3, !dbg !37
  br i1 %cmp, label %if.then, label %if.end, !dbg !38

if.then:                                          ; preds = %entry
  store i32 3, ptr @g, align 4, !dbg !39
  br label %return, !dbg !41

if.end:                                           ; preds = %entry
  %1 = load i32, ptr %n.addr, align 4, !dbg !42
  %dec = add nsw i32 %1, -1, !dbg !42
  store i32 %dec, ptr %n.addr, align 4, !dbg !42
  %2 = load i32, ptr %n.addr, align 4, !dbg !43
  call void @f(i32 noundef %2), !dbg !44
  br label %return, !dbg !45

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !46 {
entry:
  call void @f(i32 noundef 10), !dbg !49
  %0 = load i32, ptr @g, align 4, !dbg !50
  %cmp = icmp eq i32 %0, 3, !dbg !51
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !52
  ret i32 0, !dbg !53
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !5, line: 7, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_afterrec_3.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "5a28fa67d59a9b3b8db52f96260b3c3c")
!4 = !{!0}
!5 = !DIFile(filename: "src/ae_recursion_tests/recursive_afterrec_3.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "5a28fa67d59a9b3b8db52f96260b3c3c")
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{i32 7, !"Dwarf Version", i32 5}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"wchar_size", i32 4}
!10 = !{i32 8, !"PIC Level", i32 2}
!11 = !{i32 7, !"PIE Level", i32 2}
!12 = !{i32 7, !"uwtable", i32 2}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!15 = distinct !DISubprogram(name: "f", scope: !5, file: !5, line: 9, type: !16, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !18)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !6}
!18 = !{}
!19 = !DILocalVariable(name: "n", arg: 1, scope: !15, file: !5, line: 9, type: !6)
!20 = !DILocation(line: 9, column: 12, scope: !15)
!21 = !DILocation(line: 10, column: 9, scope: !22)
!22 = distinct !DILexicalBlock(scope: !15, file: !5, line: 10, column: 9)
!23 = !DILocation(line: 10, column: 10, scope: !22)
!24 = !DILocation(line: 10, column: 9, scope: !15)
!25 = !DILocation(line: 11, column: 11, scope: !26)
!26 = distinct !DILexicalBlock(scope: !22, file: !5, line: 10, column: 13)
!27 = !DILocation(line: 12, column: 9, scope: !26)
!28 = !DILocation(line: 14, column: 6, scope: !15)
!29 = !DILocation(line: 15, column: 8, scope: !15)
!30 = !DILocation(line: 15, column: 5, scope: !15)
!31 = !DILocation(line: 16, column: 1, scope: !15)
!32 = distinct !DISubprogram(name: "f2", scope: !5, file: !5, line: 18, type: !16, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !18)
!33 = !DILocalVariable(name: "n", arg: 1, scope: !32, file: !5, line: 18, type: !6)
!34 = !DILocation(line: 18, column: 13, scope: !32)
!35 = !DILocation(line: 19, column: 9, scope: !36)
!36 = distinct !DILexicalBlock(scope: !32, file: !5, line: 19, column: 9)
!37 = !DILocation(line: 19, column: 10, scope: !36)
!38 = !DILocation(line: 19, column: 9, scope: !32)
!39 = !DILocation(line: 20, column: 11, scope: !40)
!40 = distinct !DILexicalBlock(scope: !36, file: !5, line: 19, column: 13)
!41 = !DILocation(line: 21, column: 9, scope: !40)
!42 = !DILocation(line: 23, column: 6, scope: !32)
!43 = !DILocation(line: 24, column: 7, scope: !32)
!44 = !DILocation(line: 24, column: 5, scope: !32)
!45 = !DILocation(line: 25, column: 1, scope: !32)
!46 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 27, type: !47, scopeLine: 27, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !18)
!47 = !DISubroutineType(types: !48)
!48 = !{!6}
!49 = !DILocation(line: 28, column: 5, scope: !46)
!50 = !DILocation(line: 30, column: 16, scope: !46)
!51 = !DILocation(line: 30, column: 18, scope: !46)
!52 = !DILocation(line: 30, column: 5, scope: !46)
!53 = !DILocation(line: 31, column: 1, scope: !46)
