; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_recursion_tests/recursive_id_4.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_id_4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @id(i32 noundef %x) #0 !dbg !20 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %x, ptr %x.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i32, ptr %x.addr, align 4, !dbg !27
  %cmp = icmp eq i32 %0, 0, !dbg !29
  br i1 %cmp, label %if.then, label %if.end, !dbg !30

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4, !dbg !31
  br label %return, !dbg !31

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %ret, metadata !32, metadata !DIExpression()), !dbg !33
  %1 = load i32, ptr %x.addr, align 4, !dbg !34
  %sub = sub i32 %1, 1, !dbg !35
  %call = call i32 @id(i32 noundef %sub), !dbg !36
  %add = add nsw i32 %call, 1, !dbg !37
  store i32 %add, ptr %ret, align 4, !dbg !33
  %2 = load i32, ptr %ret, align 4, !dbg !38
  %cmp1 = icmp sgt i32 %2, 5, !dbg !40
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !41

if.then2:                                         ; preds = %if.end
  store i32 5, ptr %retval, align 4, !dbg !42
  br label %return, !dbg !42

if.end3:                                          ; preds = %if.end
  %3 = load i32, ptr %ret, align 4, !dbg !43
  store i32 %3, ptr %retval, align 4, !dbg !44
  br label %return, !dbg !44

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i32, ptr %retval, align 4, !dbg !45
  ret i32 %4, !dbg !45
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !46 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i32, align 4
  %res = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  call void @llvm.dbg.declare(metadata ptr %x, metadata !49, metadata !DIExpression()), !dbg !50
  %call = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %x), !dbg !51
  %0 = load i32, ptr %x, align 4, !dbg !52
  %cmp = icmp sge i32 %0, 0, !dbg !54
  br i1 %cmp, label %if.then, label %if.end, !dbg !55

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %res, metadata !56, metadata !DIExpression()), !dbg !58
  %1 = load i32, ptr %x, align 4, !dbg !59
  %call1 = call i32 @id(i32 noundef %1), !dbg !60
  store i32 %call1, ptr %res, align 4, !dbg !58
  %2 = load i32, ptr %res, align 4, !dbg !61
  %cmp2 = icmp sle i32 %2, 5, !dbg !62
  call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !63
  br label %if.end, !dbg !64

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, ptr %retval, align 4, !dbg !65
  ret i32 %3, !dbg !65
}

declare i32 @__isoc99_scanf(ptr noundef, ...) #2

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!12, !13, !14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 15, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_recursion_tests/recursive_id_4.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ff148f82e463ebb221b1aff32e7dc5c2")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 24, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 3)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !9, globals: !11, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_id_4.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "ff148f82e463ebb221b1aff32e7dc5c2")
!9 = !{!10}
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!0}
!12 = !{i32 7, !"Dwarf Version", i32 5}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 8, !"PIC Level", i32 2}
!16 = !{i32 7, !"PIE Level", i32 2}
!17 = !{i32 7, !"uwtable", i32 2}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!20 = distinct !DISubprogram(name: "id", scope: !2, file: !2, line: 6, type: !21, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !24)
!21 = !DISubroutineType(types: !22)
!22 = !{!23, !23}
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !{}
!25 = !DILocalVariable(name: "x", arg: 1, scope: !20, file: !2, line: 6, type: !23)
!26 = !DILocation(line: 6, column: 12, scope: !20)
!27 = !DILocation(line: 7, column: 9, scope: !28)
!28 = distinct !DILexicalBlock(scope: !20, file: !2, line: 7, column: 9)
!29 = !DILocation(line: 7, column: 10, scope: !28)
!30 = !DILocation(line: 7, column: 9, scope: !20)
!31 = !DILocation(line: 7, column: 15, scope: !28)
!32 = !DILocalVariable(name: "ret", scope: !20, file: !2, line: 8, type: !23)
!33 = !DILocation(line: 8, column: 9, scope: !20)
!34 = !DILocation(line: 8, column: 32, scope: !20)
!35 = !DILocation(line: 8, column: 33, scope: !20)
!36 = !DILocation(line: 8, column: 15, scope: !20)
!37 = !DILocation(line: 8, column: 37, scope: !20)
!38 = !DILocation(line: 9, column: 9, scope: !39)
!39 = distinct !DILexicalBlock(scope: !20, file: !2, line: 9, column: 9)
!40 = !DILocation(line: 9, column: 13, scope: !39)
!41 = !DILocation(line: 9, column: 9, scope: !20)
!42 = !DILocation(line: 9, column: 18, scope: !39)
!43 = !DILocation(line: 10, column: 12, scope: !20)
!44 = !DILocation(line: 10, column: 5, scope: !20)
!45 = !DILocation(line: 11, column: 1, scope: !20)
!46 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 13, type: !47, scopeLine: 13, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !24)
!47 = !DISubroutineType(types: !48)
!48 = !{!23}
!49 = !DILocalVariable(name: "x", scope: !46, file: !2, line: 14, type: !23)
!50 = !DILocation(line: 14, column: 9, scope: !46)
!51 = !DILocation(line: 15, column: 5, scope: !46)
!52 = !DILocation(line: 16, column: 8, scope: !53)
!53 = distinct !DILexicalBlock(scope: !46, file: !2, line: 16, column: 8)
!54 = !DILocation(line: 16, column: 10, scope: !53)
!55 = !DILocation(line: 16, column: 8, scope: !46)
!56 = !DILocalVariable(name: "res", scope: !57, file: !2, line: 17, type: !23)
!57 = distinct !DILexicalBlock(scope: !53, file: !2, line: 16, column: 15)
!58 = !DILocation(line: 17, column: 13, scope: !57)
!59 = !DILocation(line: 17, column: 22, scope: !57)
!60 = !DILocation(line: 17, column: 19, scope: !57)
!61 = !DILocation(line: 18, column: 20, scope: !57)
!62 = !DILocation(line: 18, column: 24, scope: !57)
!63 = !DILocation(line: 18, column: 9, scope: !57)
!64 = !DILocation(line: 19, column: 5, scope: !57)
!65 = !DILocation(line: 20, column: 1, scope: !46)
