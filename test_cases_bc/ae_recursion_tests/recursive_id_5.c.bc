; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_recursion_tests/recursive_id_5.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_id_5.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%ud\00", align 1, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @id(i32 noundef %x) #0 !dbg !18 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %x, ptr %x.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %0 = load i32, ptr %x.addr, align 4, !dbg !25
  %cmp = icmp eq i32 %0, 0, !dbg !27
  br i1 %cmp, label %if.then, label %if.end, !dbg !28

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4, !dbg !29
  br label %return, !dbg !29

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %ret, metadata !30, metadata !DIExpression()), !dbg !31
  %1 = load i32, ptr %x.addr, align 4, !dbg !32
  %sub = sub i32 %1, 1, !dbg !33
  %call = call i32 @id2(i32 noundef %sub), !dbg !34
  %add = add i32 %call, 1, !dbg !35
  store i32 %add, ptr %ret, align 4, !dbg !31
  %2 = load i32, ptr %ret, align 4, !dbg !36
  %cmp1 = icmp ugt i32 %2, 2, !dbg !38
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !39

if.then2:                                         ; preds = %if.end
  store i32 2, ptr %retval, align 4, !dbg !40
  br label %return, !dbg !40

if.end3:                                          ; preds = %if.end
  %3 = load i32, ptr %ret, align 4, !dbg !41
  store i32 %3, ptr %retval, align 4, !dbg !42
  br label %return, !dbg !42

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i32, ptr %retval, align 4, !dbg !43
  ret i32 %4, !dbg !43
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @id2(i32 noundef %x) #0 !dbg !44 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32 %x, ptr %x.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %x.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %0 = load i32, ptr %x.addr, align 4, !dbg !47
  %cmp = icmp eq i32 %0, 0, !dbg !49
  br i1 %cmp, label %if.then, label %if.end, !dbg !50

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4, !dbg !51
  br label %return, !dbg !51

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %ret, metadata !52, metadata !DIExpression()), !dbg !53
  %1 = load i32, ptr %x.addr, align 4, !dbg !54
  %sub = sub i32 %1, 1, !dbg !55
  %call = call i32 @id(i32 noundef %sub), !dbg !56
  %add = add i32 %call, 1, !dbg !57
  store i32 %add, ptr %ret, align 4, !dbg !53
  %2 = load i32, ptr %ret, align 4, !dbg !58
  %cmp1 = icmp ugt i32 %2, 2, !dbg !60
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !61

if.then2:                                         ; preds = %if.end
  store i32 2, ptr %retval, align 4, !dbg !62
  br label %return, !dbg !62

if.end3:                                          ; preds = %if.end
  %3 = load i32, ptr %ret, align 4, !dbg !63
  store i32 %3, ptr %retval, align 4, !dbg !64
  br label %return, !dbg !64

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %4 = load i32, ptr %retval, align 4, !dbg !65
  ret i32 %4, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !66 {
entry:
  %x = alloca i32, align 4
  %res = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %x, metadata !70, metadata !DIExpression()), !dbg !71
  %call = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %x), !dbg !72
  call void @llvm.dbg.declare(metadata ptr %res, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load i32, ptr %x, align 4, !dbg !75
  %call1 = call i32 @id(i32 noundef %0), !dbg !76
  store i32 %call1, ptr %res, align 4, !dbg !74
  %1 = load i32, ptr %res, align 4, !dbg !77
  %cmp = icmp sle i32 %1, 2, !dbg !78
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !79
  ret i32 0, !dbg !80
}

declare i32 @__isoc99_scanf(ptr noundef, ...) #2

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!10, !11, !12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(scope: null, file: !2, line: 25, type: !3, isLocal: true, isDefinition: true)
!2 = !DIFile(filename: "src/ae_recursion_tests/recursive_id_5.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "5a1fddf916afdb8377d8bc3ce82f68b8")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!5 = !{!6}
!6 = !DISubrange(count: 4)
!7 = distinct !DICompileUnit(language: DW_LANG_C11, file: !8, producer: "clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !9, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_id_5.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "5a1fddf916afdb8377d8bc3ce82f68b8")
!9 = !{!0}
!10 = !{i32 7, !"Dwarf Version", i32 5}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 8, !"PIC Level", i32 2}
!14 = !{i32 7, !"PIE Level", i32 2}
!15 = !{i32 7, !"uwtable", i32 2}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!18 = distinct !DISubprogram(name: "id", scope: !2, file: !2, line: 9, type: !19, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !22)
!19 = !DISubroutineType(types: !20)
!20 = !{!21, !21}
!21 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!22 = !{}
!23 = !DILocalVariable(name: "x", arg: 1, scope: !18, file: !2, line: 9, type: !21)
!24 = !DILocation(line: 9, column: 30, scope: !18)
!25 = !DILocation(line: 10, column: 9, scope: !26)
!26 = distinct !DILexicalBlock(scope: !18, file: !2, line: 10, column: 9)
!27 = !DILocation(line: 10, column: 10, scope: !26)
!28 = !DILocation(line: 10, column: 9, scope: !18)
!29 = !DILocation(line: 10, column: 15, scope: !26)
!30 = !DILocalVariable(name: "ret", scope: !18, file: !2, line: 11, type: !21)
!31 = !DILocation(line: 11, column: 18, scope: !18)
!32 = !DILocation(line: 11, column: 28, scope: !18)
!33 = !DILocation(line: 11, column: 29, scope: !18)
!34 = !DILocation(line: 11, column: 24, scope: !18)
!35 = !DILocation(line: 11, column: 33, scope: !18)
!36 = !DILocation(line: 12, column: 9, scope: !37)
!37 = distinct !DILexicalBlock(scope: !18, file: !2, line: 12, column: 9)
!38 = !DILocation(line: 12, column: 13, scope: !37)
!39 = !DILocation(line: 12, column: 9, scope: !18)
!40 = !DILocation(line: 12, column: 18, scope: !37)
!41 = !DILocation(line: 13, column: 12, scope: !18)
!42 = !DILocation(line: 13, column: 5, scope: !18)
!43 = !DILocation(line: 14, column: 1, scope: !18)
!44 = distinct !DISubprogram(name: "id2", scope: !2, file: !2, line: 16, type: !19, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !22)
!45 = !DILocalVariable(name: "x", arg: 1, scope: !44, file: !2, line: 16, type: !21)
!46 = !DILocation(line: 16, column: 31, scope: !44)
!47 = !DILocation(line: 17, column: 9, scope: !48)
!48 = distinct !DILexicalBlock(scope: !44, file: !2, line: 17, column: 9)
!49 = !DILocation(line: 17, column: 10, scope: !48)
!50 = !DILocation(line: 17, column: 9, scope: !44)
!51 = !DILocation(line: 17, column: 15, scope: !48)
!52 = !DILocalVariable(name: "ret", scope: !44, file: !2, line: 18, type: !21)
!53 = !DILocation(line: 18, column: 18, scope: !44)
!54 = !DILocation(line: 18, column: 27, scope: !44)
!55 = !DILocation(line: 18, column: 28, scope: !44)
!56 = !DILocation(line: 18, column: 24, scope: !44)
!57 = !DILocation(line: 18, column: 32, scope: !44)
!58 = !DILocation(line: 19, column: 9, scope: !59)
!59 = distinct !DILexicalBlock(scope: !44, file: !2, line: 19, column: 9)
!60 = !DILocation(line: 19, column: 13, scope: !59)
!61 = !DILocation(line: 19, column: 9, scope: !44)
!62 = !DILocation(line: 19, column: 18, scope: !59)
!63 = !DILocation(line: 20, column: 12, scope: !44)
!64 = !DILocation(line: 20, column: 5, scope: !44)
!65 = !DILocation(line: 21, column: 1, scope: !44)
!66 = distinct !DISubprogram(name: "main", scope: !2, file: !2, line: 23, type: !67, scopeLine: 23, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !22)
!67 = !DISubroutineType(types: !68)
!68 = !{!69}
!69 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!70 = !DILocalVariable(name: "x", scope: !66, file: !2, line: 24, type: !69)
!71 = !DILocation(line: 24, column: 9, scope: !66)
!72 = !DILocation(line: 25, column: 5, scope: !66)
!73 = !DILocalVariable(name: "res", scope: !66, file: !2, line: 27, type: !69)
!74 = !DILocation(line: 27, column: 9, scope: !66)
!75 = !DILocation(line: 27, column: 18, scope: !66)
!76 = !DILocation(line: 27, column: 15, scope: !66)
!77 = !DILocation(line: 28, column: 16, scope: !66)
!78 = !DILocation(line: 28, column: 20, scope: !66)
!79 = !DILocation(line: 28, column: 5, scope: !66)
!80 = !DILocation(line: 29, column: 1, scope: !66)
