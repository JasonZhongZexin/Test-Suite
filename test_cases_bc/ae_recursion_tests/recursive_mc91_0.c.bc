; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/ae_recursion_tests/recursive_mc91_0.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_mc91_0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @mc91(i32 noundef %p) #0 !dbg !10 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %p1 = alloca i32, align 4
  %p2 = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %p, ptr %p.addr, align 4
  call void @llvm.dbg.declare(metadata ptr %p.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, ptr %p.addr, align 4, !dbg !18
  %cmp = icmp sgt i32 %0, 100, !dbg !20
  br i1 %cmp, label %if.then, label %if.else, !dbg !21

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %p.addr, align 4, !dbg !22
  %sub = sub nsw i32 %1, 10, !dbg !24
  store i32 %sub, ptr %retval, align 4, !dbg !25
  br label %return, !dbg !25

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %p1, metadata !26, metadata !DIExpression()), !dbg !28
  %2 = load i32, ptr %p.addr, align 4, !dbg !29
  %add = add nsw i32 %2, 11, !dbg !30
  store i32 %add, ptr %p1, align 4, !dbg !28
  call void @llvm.dbg.declare(metadata ptr %p2, metadata !31, metadata !DIExpression()), !dbg !32
  %3 = load i32, ptr %p1, align 4, !dbg !33
  %call = call i32 @mc91(i32 noundef %3), !dbg !34
  store i32 %call, ptr %p2, align 4, !dbg !32
  call void @llvm.dbg.declare(metadata ptr %result, metadata !35, metadata !DIExpression()), !dbg !36
  %4 = load i32, ptr %p2, align 4, !dbg !37
  %call1 = call i32 @mc91(i32 noundef %4), !dbg !38
  store i32 %call1, ptr %result, align 4, !dbg !36
  %5 = load i32, ptr %result, align 4, !dbg !39
  store i32 %5, ptr %retval, align 4, !dbg !40
  br label %return, !dbg !40

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, ptr %retval, align 4, !dbg !41
  ret i32 %6, !dbg !41
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !42 {
entry:
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %result, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 @mc91(i32 noundef 40), !dbg !47
  store i32 %call, ptr %result, align 4, !dbg !46
  %0 = load i32, ptr %result, align 4, !dbg !48
  %cmp = icmp sge i32 %0, 91, !dbg !49
  call void @svf_assert(i1 noundef zeroext %cmp), !dbg !50
  ret i32 0, !dbg !51
}

declare void @svf_assert(i1 noundef zeroext) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/ae_recursion_tests/recursive_mc91_0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "bd1c09073b96a825bfc31957b77ee829")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 7, !"PIE Level", i32 2}
!7 = !{i32 7, !"uwtable", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = !{!"clang version 16.0.4 (https://github.com/bjjwwang/LLVM-compile a0f79b14ca0360151ea799a9ad1d5932235bbee1)"}
!10 = distinct !DISubprogram(name: "mc91", scope: !11, file: !11, line: 4, type: !12, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!11 = !DIFile(filename: "src/ae_recursion_tests/recursive_mc91_0.c", directory: "/home/runner/work/Test-Suite/Test-Suite", checksumkind: CSK_MD5, checksum: "bd1c09073b96a825bfc31957b77ee829")
!12 = !DISubroutineType(types: !13)
!13 = !{!14, !14}
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{}
!16 = !DILocalVariable(name: "p", arg: 1, scope: !10, file: !11, line: 4, type: !14)
!17 = !DILocation(line: 4, column: 14, scope: !10)
!18 = !DILocation(line: 5, column: 8, scope: !19)
!19 = distinct !DILexicalBlock(scope: !10, file: !11, line: 5, column: 8)
!20 = !DILocation(line: 5, column: 10, scope: !19)
!21 = !DILocation(line: 5, column: 8, scope: !10)
!22 = !DILocation(line: 6, column: 16, scope: !23)
!23 = distinct !DILexicalBlock(scope: !19, file: !11, line: 5, column: 16)
!24 = !DILocation(line: 6, column: 18, scope: !23)
!25 = !DILocation(line: 6, column: 9, scope: !23)
!26 = !DILocalVariable(name: "p1", scope: !27, file: !11, line: 8, type: !14)
!27 = distinct !DILexicalBlock(scope: !19, file: !11, line: 7, column: 10)
!28 = !DILocation(line: 8, column: 13, scope: !27)
!29 = !DILocation(line: 8, column: 18, scope: !27)
!30 = !DILocation(line: 8, column: 20, scope: !27)
!31 = !DILocalVariable(name: "p2", scope: !27, file: !11, line: 9, type: !14)
!32 = !DILocation(line: 9, column: 13, scope: !27)
!33 = !DILocation(line: 9, column: 23, scope: !27)
!34 = !DILocation(line: 9, column: 18, scope: !27)
!35 = !DILocalVariable(name: "result", scope: !27, file: !11, line: 10, type: !14)
!36 = !DILocation(line: 10, column: 13, scope: !27)
!37 = !DILocation(line: 10, column: 27, scope: !27)
!38 = !DILocation(line: 10, column: 22, scope: !27)
!39 = !DILocation(line: 11, column: 16, scope: !27)
!40 = !DILocation(line: 11, column: 9, scope: !27)
!41 = !DILocation(line: 13, column: 1, scope: !10)
!42 = distinct !DISubprogram(name: "main", scope: !11, file: !11, line: 15, type: !43, scopeLine: 15, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!43 = !DISubroutineType(types: !44)
!44 = !{!14}
!45 = !DILocalVariable(name: "result", scope: !42, file: !11, line: 16, type: !14)
!46 = !DILocation(line: 16, column: 9, scope: !42)
!47 = !DILocation(line: 16, column: 18, scope: !42)
!48 = !DILocation(line: 17, column: 16, scope: !42)
!49 = !DILocation(line: 17, column: 23, scope: !42)
!50 = !DILocation(line: 17, column: 5, scope: !42)
!51 = !DILocation(line: 18, column: 1, scope: !42)
